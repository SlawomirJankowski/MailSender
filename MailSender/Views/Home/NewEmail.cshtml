@model MailSender.Models.ViewModels.EmailMessageViewModel

@{
    ViewBag.Title = "Create a new e-mail";
}

<div>
    <h1>@ViewBag.Title </h1>
</div>

<hr />

<div class="row">

    @using (Html.BeginForm("NewEmail", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        @Html.HiddenFor(x => x.EmailMessage.Id)
        @Html.HiddenFor(x => x.EmailMessage.UserId)
        @Html.HiddenFor(x => x.EmailMessage.SentDate)

        <div class="row">
            <p class="alert alert-success">Fields: SENDER E-MAIL, TO, SUBJECT are <strong>required !</strong></p>

            <div class="col col-5">
                <div class="form-group mt-2">
                    @Html.LabelFor(x => x.EmailMessage.UserEmailAccountParamsId, new { @class = "control-label col-form-label-lg" })
                    @Html.DropDownListFor(x => x.EmailMessage.UserEmailAccountParamsId,
                            new SelectList(Model.UserEmailAccountsParams, "Id", "SenderEmail"),
                             "-- Select your e-mail account --",
                             new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.EmailMessage.UserEmailAccountParamsId)
                </div>

                <div class="form-group mt-2">
                    @Html.LabelFor(x => x.EmailMessage.ToEmail, new { @class = "control-label col-form-label-lg" })

                    @Html.TextBoxFor(x => x.EmailMessage.ToEmail,
                   new { @class = "form-control", autocomplete = "off", type = "email" })
                    @Html.ValidationMessageFor(x => x.EmailMessage.ToEmail)
                </div>

                <div class="form-group mt-2">
                    @Html.LabelFor(x => x.EmailMessage.CCEmail, new { @class = "control-label col-form-label-lg" })

                    @Html.TextBoxFor(x => x.EmailMessage.CCEmail,
                   new { @class = "form-control", autocomplete = "off", type = "email" })
                    @Html.ValidationMessageFor(x => x.EmailMessage.CCEmail)
                </div>

            </div>

            <div class="col col-5 offset-2">
                @Html.LabelFor(x => x.FileUploader.PostedFiles, new { @class = "control-label col-form-label-lg" })
                @Html.TextBoxFor(x => x.FileUploader.PostedFiles,
                new { @class = "form-control btn-info", type = "file", multiple = "multiple", name = "postedFiles" })

            </div>

        </div>
        <div class="col col-12">
            <div class="form-group mb-2 mt-4">
                @Html.LabelFor(x => x.EmailMessage.Subject, new { @class = "control-label col-form-label-lg" })
                @Html.TextBoxFor(x => x.EmailMessage.Subject,
               new { @class = "form-control form-control-lg col-12 subject-textbox", autocomplete = "off", type = "text" })
                @Html.ValidationMessageFor(x => x.EmailMessage.Subject)
            </div>

            <div class="form-group mb-2 mt-4 ">
                @Html.LabelFor(x => x.EmailMessage.Body, new { @class = "control-label col-form-label-lg" })
                <div class="">
                    @Html.TextAreaFor(x => x.EmailMessage.Body,
                   new { @class = "form-control", id = "editor" })
                </div>
            </div>

            <div class="text-center mt-5">
                <button class="btn btn-info btn-lg " type="submit">
                    <i class="fa-solid fa-paper-plane me-2"></i>
                    Save & Send
                </button>
            </div>
        </div>
    }
</div>


<script>


        ClassicEditor
            .create(document.querySelector('#editor'))
            .then(editor => {
                editor.getData();
            })
            .catch(error => {
                console.error(error);
            });

</script>